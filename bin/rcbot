#! /bin/bash

answer=""
echo "What authentication type is utilized by the server?"
select pl in "Password" "LDAP"
do
    case $pl in
        Password) answer="password"; break;;
        LDAP    ) answer="ldap"; break;;
    esac
done
export ROCKETCHAT_AUTH=$answer

answer=""
read -p "What is the bot account's user name?
This user name must be registered on the server and will also be used to summon your bot.
The bot account must be granted the 'bot' role via the Administration panel.
> " answer
export ROCKETCHAT_USER=$answer

# TODO this variable is temporary; refactor when the logic flow is done
bot=$answer

answer=""
read -s -p "What is the bot account's password?
> " answer
export ROCKETCHAT_PASSWORD=$answer

# TODO functions and a logic flow for all this because the vars
# LISTEN_ON_ALL_PUBLIC, ROCKETCHAT_ROOM and RESPOND_TO_DM have a very specific relationship
# see https://github.com/RocketChat/hubot-rocketchat/blob/master/README.md for details
# TODO this logic flow should include the ability to reconfigure any options previously chosen
# before actually running the bot (perhaps after presenting a config summary)
# it should also allow modification of loaded options from the config file (see notes at the bottom of this file)

# answer=false
# echo "Should the bot listen and respond in all public channels as well as direct messages?
# This will also allow the bot to listen and respond in all newly created private groups where the bot is added a
# select yn in "Yes" "No"
# do
#     case $yn in
#         Yes) answer=true; export ROCKETCHAT_ROOM=""; break;;
#         No ) answer=false; break;;
#     esac
# done
# export LISTEN_ON_ALL_PUBLIC=$answer
export LISTEN_ON_ALL_PUBLIC=true

# answer=""
# read -p "In which channel(s) should the bot listen and respond?
# Separate multiple channels with commas.
# > " answer
# export ROCKETCHAT_ROOM=$answer
#
# TODO finish these up into prompts/functions
# export RESPOND_TO_DM=''
# export RESPOND_TO_EDITED=''
# export ROOM_ID_CACHE_SIZE=''
# export DM_ROOM_ID_CACHE_SIZE=''
# export ROOM_ID_CACHE_MAX_AGE=''

# TODO some variables here to avoid repetition
cp -rs $SNAP/.bot_templates/template_rc $SNAP_USER_COMMON/$bot
cd $SNAP_USER_COMMON/$bot

# TODO pipe this output to a log file
# TODO come up with a way to detect whether this actually started ok
# if not, tell the user to retry? Try to detect what happened?
bin/hubot --name $bot -a rocketchat > /dev/null &

# TODO save a config file for the bot
# that way, if someone specifies an existing bot name,
# they can simply reconfigure it rather than overwrite it

